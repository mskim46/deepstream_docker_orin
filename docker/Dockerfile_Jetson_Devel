# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

ARG L4T_VERSION

FROM nvcr.io/nvidia/tritonserver:24.08-py3-igpu

RUN apt-key adv --fetch-keys https://repo.download.nvidia.com/jetson/jetson-ota-public.asc
RUN echo "deb https://repo.download.nvidia.com/jetson/common r36.4 main" >> /etc/apt/sources.list

# add this manually
# wget -O /tmp99/libgstrtpmanager.so https://<host name>/aarch64/libgstrtpmanager.so && \

# GStreamer + deepstream devel dependencies
RUN --mount=type=bind,src=docker,target=/tmp/docker \
  mkdir -p /root/tmp ; mkdir -p /lib/firmware ; mkdir /tmp99 ; \
     apt-get update && \
	DEBIAN_FRONTEND=noninteractive 	apt-get install -y --no-install-recommends \
	linux-libc-dev \
	libglew2.2 libjpeg8 libjson-glib-1.0-0 \
	gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-tools \
	gstreamer1.0-alsa \
	libuuid1 \
	libjansson4 \
	libjansson-dev \
	librabbitmq4 \
	libgles2-mesa \
	libv4l-dev \
	gdb bash-completion libboost-dev \
	uuid-dev libgstrtspserver-1.0-0 libgstrtspserver-1.0-dev \
	libgstreamer1.0-dev \
	libgstreamer-plugins-base1.0-dev \
	libglew-dev \
	libssl-dev \
        libjpeg-dev \
	freeglut3-dev \
	libjpeg-dev \
	libjson-glib-dev \
	libboost-dev \
	librabbitmq-dev \
	libgles2-mesa-dev \
	pkg-config \
	libxau-dev \
	libxdmcp-dev \
	libxcb1-dev \
	libxext-dev \
	libx11-dev \
	git \
	wget \
        unzip \
        openssl \
        libssl-dev \
	python3-distutils \
	python3-apt \
	python3 \
        libyaml-cpp-dev \
	rsyslog \
	tzdata \
	libcurl4 libcurl4-openssl-dev ca-certificates \
	vim g++  \
        tar \
        libjsoncpp-dev \
	gstreamer1.0-rtsp \
        libc-bin \
        libpmi2-0 \
        libslurm37 \
        locales \
        libc6 \
        libcurl3-gnutls \
        linux-libc-dev \
        libc-dev-bin \
        libcjson-dev \
        libnvvpi3 \
        vpi3-dev && \
        tar --version ; ls -ltr /root ; tar -xvf /tmp/docker/deepstream_sdk_v7.1.0_jetson.tbz2 -C / ; /opt/nvidia/deepstream/deepstream/install.sh && \
        cp /tmp/docker/rsyslog /etc/init.d/rsyslog && \
        chmod +x /etc/init.d/rsyslog && \
        /tmp/docker/install_extra_libs.sh && \
        cp /tmp/docker/user_additional_install_devel.sh /opt/nvidia/deepstream/deepstream/ && \
        cp /tmp/docker/user_deepstream_python_apps_install.sh /opt/nvidia/deepstream/deepstream/ && \
        cp /tmp/docker/LicenseAgreementContainer.pdf /opt/nvidia/deepstream/deepstream/ && \
        mv  /opt/nvidia/deepstream/deepstream/user_additional_install_devel.sh /opt/nvidia/deepstream/deepstream/user_additional_install.sh && \
        rm -rf /var/lib/apt/lists/* && \
        rm -rf /root/tmp && \
        apt autoremove


RUN mkdir -p /opt/tritonclient/ && \
    mkdir -p /tmp/temp_triton99 && \
    mkdir -p /opt/proto && \
    mkdir -p /tmp/temp_proto99 && \
    mkdir -p /opt/half && \
    mkdir -p /tmp/half99 && \
    cd /tmp/temp_triton99 && \
    wget https://github.com/triton-inference-server/server/releases/download/v2.49.0/tritonserver2.49.0-igpu.tar.gz -nv ;  \
    tar xvf tritonserver2.49.0-igpu.tar.gz ; \
    ls -ltr /tmp/temp_triton99 && \
    cd  /tmp/temp_triton99/tritonserver/clients ; \
    mv lib /opt/tritonclient/ ; \
    mv include /opt/tritonclient/ && \
    cd /tmp/temp_proto99 && \
    wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-aarch_64.zip -nv && \
    /usr/bin/unzip /tmp/temp_proto99/protoc-21.12-linux-aarch_64.zip -d /opt/proto && \
    cd /tmp/half99 && \
    wget https://sourceforge.net/projects/half/files/half/2.1.0/half-2.1.0.zip -nv && \
    /usr/bin/unzip /tmp/half99/half-2.1.0.zip -d /opt/half && \
    cd / && \
    rm -rf /tmp/temp_triton99 && \
    rm -rf /tmp/temp_proto99 && \
    rm -rf /tmp/half99 

RUN rm -f /usr/local/cuda-12.6/lib64/libnvjpeg.so


# workaround for directory rename from tegra to nvidia (symlink for jetson triton base docker)
RUN ln -s /usr/lib/aarch64-linux-gnu/nvidia /usr/lib/aarch64-linux-gnu/tegra

# IP requirement for removal
 RUN rm -f /usr/lib/aarch64-linux-gnu/libavresample* /usr/lib/aarch64-linux-gnu/libavutil* \
    /usr/lib/aarch64-linux-gnu/libavcodec* /usr/lib/aarch64-linux-gnu/libavformat* \
    /usr/lib/aarch64-linux-gnu/libavfilter*
 RUN rm -f /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstaudioparsers.so
 RUN rm -f /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstfaad.so
 RUN rm -f /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstvoaacenc.so \
    /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstx264.so /usr/lib/aarch64-linux-gnu/libx264.so* \
    /usr/lib/aarch64-linux-gnu/libmpeg2.so* /usr/lib/aarch64-linux-gnu/libmpeg2convert.so* /usr/lib/aarch64-linux-gnu/libmpeg2encpp-2.1.so* 
 RUN rm -f /usr/lib/aarch64-linux-gnu/libmpg123.so* /usr/lib/aarch64-linux-gnu/libvpx.so* /usr/lib/aarch64-linux-gnu/libx265.so* \
    /usr/lib/aarch64-linux-gnu/libde265.so* /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstx265.so* \
    /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstde265.so* /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstvpx.so \
     /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstopenh264.so /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstnvcodec.so \
     /usr/lib/aarch64-linux-gnu/libvo-aacenc.so* 

# new IP additions

RUN rm -f /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstuvch264.so /usr/lib/aarch64-linux-gnu/libopenh264.so.2.2.0 /usr/lib/aarch64-linux-gnu/libopenh264.so.6 \
     /usr/lib/aarch64-linux-gnu/libvo-aacenc.so.0 /usr/lib/aarch64-linux-gnu/libvo-aacenc.so.0.0.4 /usr/lib/aarch64-linux-gnu/libmp3lame.so.0.0.0 \
     /usr/lib/aarch64-linux-gnu/libmp3lame.so.0 /usr/lib/aarch64-linux-gnu/libfaad* /usr/lib/aarch64-linux-gnu/libFLAC.so* \
     /usr/lib/aarch64-linux-gnu/libmjpegutils-2.1.so.0* /usr/lib/aarch64-linux-gnu/libxvidcore.so* /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstmpegpsmux.so \
    /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstflac.so \
     /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstmpeg2enc.so /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstmpeg2dec.so


#############User Edit Region#################################################
# Update package lists and install sudo and ping.
RUN apt-get update && apt install -y sudo iputils-ping
 
# Install Jeston-stat
RUN sudo pip3 install jetson-stats

# Install dependencies for IMC
RUN set -e

# Install OpenSSL 1.1.1 packages required by AWS SDK.
RUN wget http://ports.ubuntu.com/pool/main/o/openssl/openssl_1.1.1f-1ubuntu2_arm64.deb && \
    wget http://ports.ubuntu.com/pool/main/o/openssl/libssl-dev_1.1.1f-1ubuntu2_arm64.deb && \
    wget http://ports.ubuntu.com/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_arm64.deb
RUN dpkg -i libssl1.1_1.1.1f-1ubuntu2_arm64.deb
RUN dpkg -i libssl-dev_1.1.1f-1ubuntu2_arm64.deb
RUN dpkg -i openssl_1.1.1f-1ubuntu2_arm64.deb
RUN rm -f libssl1.1_1.1.1f-1ubuntu2_arm64.deb libssl-dev_1.1.1f-1ubuntu2_arm64.deb openssl_1.1.1f-1ubuntu2_arm64.deb

# Install prerequisites for AWS SDK for C++ without reinstalling OpenSSL-related packages.
RUN apt-get install -y libcurl4-openssl-dev uuid-dev zlib1g-dev libpulse-dev

# Install Bazelisk (Bazel build system)
RUN mkdir -p /usr/local/bin && \
        wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-linux-arm64 -O /usr/local/bin/bazel && \
        chmod +x /usr/local/bin/bazel


# Build AWS SDK for C++ (DynamoDB only) from source.
WORKDIR /tmp
RUN apt-get install -y cmake 
RUN git clone --depth 1 --recurse-submodules https://github.com/aws/aws-sdk-cpp.git && \
    mkdir -p sdk_build && cd sdk_build && \
    cmake ../aws-sdk-cpp -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_PREFIX_PATH=/usr/local/ \
          -DCMAKE_INSTALL_PREFIX=/usr/local/ \
          -DBUILD_ONLY="dynamodb" && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && rm -rf aws-sdk-cpp sdk_build
WORKDIR ${DS_DIR}
############################################################################

CMD ["/bin/bash"]
WORKDIR /opt/nvidia/deepstream/deepstream

# workaround for TRT missing symlinks
RUN ln -s /usr/src/tensorrt/bin/trtexec /usr/bin/trtexec && \
    ldconfig

# RUN ldconfig

ENV LD_LIBRARY_PATH /opt/tritonserver/lib:/usr/local/cuda-12.6/lib64
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all

ENV LD_PRELOAD /usr/lib/aarch64-linux-gnu/libgomp.so.1:/lib/aarch64-linux-gnu/libGLdispatch.so:$LD_PRELOAD

ENV PATH /opt/proto/bin:$PATH

# Clean up link to internal repo
RUN sed -i '$d' /etc/apt/sources.list ; rm -f /etc/apt/sources.list.d/cuda.list

